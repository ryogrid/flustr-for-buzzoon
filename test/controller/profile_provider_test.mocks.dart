// Mocks generated by Mockito 5.4.3 from annotations
// in flustr/test/controller/profile_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:flustr/external/connection_pool.dart' as _i3;
import 'package:flustr/external/stream_wrapper.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nostr/nostr.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamAggregator_0 extends _i1.SmartFake
    implements _i2.StreamAggregator {
  _FakeStreamAggregator_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConnectionPool].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionPool extends _i1.Mock implements _i3.ConnectionPool {
  @override
  _i4.Future<void> get connected => (super.noSuchMethod(
        Invocation.getter(#connected),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  set connected(_i4.Future<void>? _connected) => super.noSuchMethod(
        Invocation.setter(
          #connected,
          _connected,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<(_i5.WebSocket, _i4.Stream<dynamic>)> get relays => (super.noSuchMethod(
        Invocation.getter(#relays),
        returnValue: <(_i5.WebSocket, _i4.Stream<dynamic>)>[],
        returnValueForMissingStub: <(_i5.WebSocket, _i4.Stream<dynamic>)>[],
      ) as List<(_i5.WebSocket, _i4.Stream<dynamic>)>);

  @override
  set relays(List<(_i5.WebSocket, _i4.Stream<dynamic>)>? _relays) =>
      super.noSuchMethod(
        Invocation.setter(
          #relays,
          _relays,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> addEvent(_i6.Event? e) => (super.noSuchMethod(
        Invocation.method(
          #addEvent,
          [e],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.Event>> getStoredEvent(
    List<_i6.Filter>? filters, {
    Duration? timeout = const Duration(milliseconds: 500),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoredEvent,
          [filters],
          {#timeout: timeout},
        ),
        returnValue: _i4.Future<List<_i6.Event>>.value(<_i6.Event>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i6.Event>>.value(<_i6.Event>[]),
      ) as _i4.Future<List<_i6.Event>>);

  @override
  _i2.StreamAggregator getEventStreamAfterEose(List<_i6.Filter>? filters) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventStreamAfterEose,
          [filters],
        ),
        returnValue: _FakeStreamAggregator_0(
          this,
          Invocation.method(
            #getEventStreamAfterEose,
            [filters],
          ),
        ),
        returnValueForMissingStub: _FakeStreamAggregator_0(
          this,
          Invocation.method(
            #getEventStreamAfterEose,
            [filters],
          ),
        ),
      ) as _i2.StreamAggregator);
}
